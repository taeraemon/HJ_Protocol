# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HJProtocol

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class GPS(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GPS()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGPS(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def GPSBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x4A\x54\x4D", size_prefixed=size_prefixed)

    # GPS
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GPS
    def Lat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GPS
    def Lon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # GPS
    def Alt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # GPS
    def Sat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # GPS
    def FixStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # GPS
    def FixType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # GPS
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def GPSStart(builder: flatbuffers.Builder):
    builder.StartObject(7)

def Start(builder: flatbuffers.Builder):
    GPSStart(builder)

def GPSAddLat(builder: flatbuffers.Builder, lat: float):
    builder.PrependFloat64Slot(0, lat, 0.0)

def AddLat(builder: flatbuffers.Builder, lat: float):
    GPSAddLat(builder, lat)

def GPSAddLon(builder: flatbuffers.Builder, lon: float):
    builder.PrependFloat64Slot(1, lon, 0.0)

def AddLon(builder: flatbuffers.Builder, lon: float):
    GPSAddLon(builder, lon)

def GPSAddAlt(builder: flatbuffers.Builder, alt: float):
    builder.PrependFloat32Slot(2, alt, 0.0)

def AddAlt(builder: flatbuffers.Builder, alt: float):
    GPSAddAlt(builder, alt)

def GPSAddSat(builder: flatbuffers.Builder, sat: int):
    builder.PrependUint8Slot(3, sat, 0)

def AddSat(builder: flatbuffers.Builder, sat: int):
    GPSAddSat(builder, sat)

def GPSAddFixStatus(builder: flatbuffers.Builder, fixStatus: int):
    builder.PrependUint8Slot(4, fixStatus, 0)

def AddFixStatus(builder: flatbuffers.Builder, fixStatus: int):
    GPSAddFixStatus(builder, fixStatus)

def GPSAddFixType(builder: flatbuffers.Builder, fixType: int):
    builder.PrependUint8Slot(5, fixType, 0)

def AddFixType(builder: flatbuffers.Builder, fixType: int):
    GPSAddFixType(builder, fixType)

def GPSAddTime(builder: flatbuffers.Builder, time: int):
    builder.PrependUint64Slot(6, time, 0)

def AddTime(builder: flatbuffers.Builder, time: int):
    GPSAddTime(builder, time)

def GPSEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return GPSEnd(builder)
