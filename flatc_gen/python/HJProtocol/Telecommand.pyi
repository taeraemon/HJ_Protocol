from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from HJProtocol.OperationMode import OperationMode

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class Telecommand(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Telecommand: ...
  @classmethod
  def GetRootAsTelecommand(cls, buf: bytes, offset: int) -> Telecommand: ...
  @classmethod
  def TelecommandBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def CmdMode(self) -> typing.Literal[OperationMode.UNKNOWN, OperationMode.INIT, OperationMode.IDLE, OperationMode.DIAG, OperationMode.ARMED, OperationMode.FLIGHT, OperationMode.KILL, OperationMode.RECOVERY]: ...
  def CmdConfig(self) -> str | None: ...
  def CmdNav(self) -> bool: ...
def TelecommandStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def TelecommandAddCmdMode(builder: flatbuffers.Builder, cmdMode: typing.Literal[OperationMode.UNKNOWN, OperationMode.INIT, OperationMode.IDLE, OperationMode.DIAG, OperationMode.ARMED, OperationMode.FLIGHT, OperationMode.KILL, OperationMode.RECOVERY]) -> None: ...
def TelecommandAddCmdConfig(builder: flatbuffers.Builder, cmdConfig: uoffset) -> None: ...
def TelecommandAddCmdNav(builder: flatbuffers.Builder, cmdNav: bool) -> None: ...
def TelecommandEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

