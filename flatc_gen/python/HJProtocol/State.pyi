from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from HJProtocol.OperationMode import OperationMode

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class State(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> State: ...
  @classmethod
  def GetRootAsState(cls, buf: bytes, offset: int) -> State: ...
  @classmethod
  def StateBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def BootTime(self) -> int: ...
  def ModeTime(self) -> int: ...
  def Mode(self) -> typing.Literal[OperationMode.UNKNOWN, OperationMode.INIT, OperationMode.IDLE, OperationMode.DIAG, OperationMode.ARMED, OperationMode.FLIGHT, OperationMode.KILL, OperationMode.RECOVERY]: ...
  def Countdown(self) -> int: ...
  def WarnCode(self) -> int: ...
  def ErrorCode(self) -> int: ...
  def Voltage(self) -> float: ...
  def Current(self) -> float: ...
def StateStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def StateAddBootTime(builder: flatbuffers.Builder, bootTime: int) -> None: ...
def StateAddModeTime(builder: flatbuffers.Builder, modeTime: int) -> None: ...
def StateAddMode(builder: flatbuffers.Builder, mode: typing.Literal[OperationMode.UNKNOWN, OperationMode.INIT, OperationMode.IDLE, OperationMode.DIAG, OperationMode.ARMED, OperationMode.FLIGHT, OperationMode.KILL, OperationMode.RECOVERY]) -> None: ...
def StateAddCountdown(builder: flatbuffers.Builder, countdown: int) -> None: ...
def StateAddWarnCode(builder: flatbuffers.Builder, warnCode: int) -> None: ...
def StateAddErrorCode(builder: flatbuffers.Builder, errorCode: int) -> None: ...
def StateAddVoltage(builder: flatbuffers.Builder, voltage: float) -> None: ...
def StateAddCurrent(builder: flatbuffers.Builder, current: float) -> None: ...
def StateEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

