# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HJProtocol

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
from HJProtocol.GPS import GPS
from HJProtocol.IMU import IMU
from HJProtocol.NAV import NAV
from HJProtocol.State import State
from typing import Optional
np = import_numpy()

class Telemetry(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Telemetry()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTelemetry(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def TelemetryBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x4A\x54\x4D", size_prefixed=size_prefixed)

    # Telemetry
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Telemetry
    def State(self) -> Optional[State]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = State()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Telemetry
    def Nav(self) -> Optional[NAV]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = NAV()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Telemetry
    def Imu(self) -> Optional[IMU]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = IMU()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Telemetry
    def Gps(self) -> Optional[GPS]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = GPS()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Telemetry
    def Sv(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Telemetry
    def SvAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Telemetry
    def SvLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Telemetry
    def SvIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Telemetry
    def Pt(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Telemetry
    def PtAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Telemetry
    def PtLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Telemetry
    def PtIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Telemetry
    def PtRaw(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Telemetry
    def PtRawAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Telemetry
    def PtRawLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Telemetry
    def PtRawIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Telemetry
    def Tc(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Telemetry
    def TcAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Telemetry
    def TcLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Telemetry
    def TcIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Telemetry
    def TcRaw(self, j: int):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # Telemetry
    def TcRawAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # Telemetry
    def TcRawLength(self) -> int:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Telemetry
    def TcRawIsNone(self) -> bool:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Telemetry
    def Config(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TelemetryStart(builder: flatbuffers.Builder):
    builder.StartObject(10)

def Start(builder: flatbuffers.Builder):
    TelemetryStart(builder)

def TelemetryAddState(builder: flatbuffers.Builder, state: int):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(state), 0)

def AddState(builder: flatbuffers.Builder, state: int):
    TelemetryAddState(builder, state)

def TelemetryAddNav(builder: flatbuffers.Builder, nav: int):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nav), 0)

def AddNav(builder: flatbuffers.Builder, nav: int):
    TelemetryAddNav(builder, nav)

def TelemetryAddImu(builder: flatbuffers.Builder, imu: int):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(imu), 0)

def AddImu(builder: flatbuffers.Builder, imu: int):
    TelemetryAddImu(builder, imu)

def TelemetryAddGps(builder: flatbuffers.Builder, gps: int):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(gps), 0)

def AddGps(builder: flatbuffers.Builder, gps: int):
    TelemetryAddGps(builder, gps)

def TelemetryAddSv(builder: flatbuffers.Builder, sv: int):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(sv), 0)

def AddSv(builder: flatbuffers.Builder, sv: int):
    TelemetryAddSv(builder, sv)

def TelemetryStartSvVector(builder, numElems: int) -> int:
    return builder.StartVector(1, numElems, 1)

def StartSvVector(builder, numElems: int) -> int:
    return TelemetryStartSvVector(builder, numElems)

def TelemetryAddPt(builder: flatbuffers.Builder, pt: int):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(pt), 0)

def AddPt(builder: flatbuffers.Builder, pt: int):
    TelemetryAddPt(builder, pt)

def TelemetryStartPtVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartPtVector(builder, numElems: int) -> int:
    return TelemetryStartPtVector(builder, numElems)

def TelemetryAddPtRaw(builder: flatbuffers.Builder, ptRaw: int):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(ptRaw), 0)

def AddPtRaw(builder: flatbuffers.Builder, ptRaw: int):
    TelemetryAddPtRaw(builder, ptRaw)

def TelemetryStartPtRawVector(builder, numElems: int) -> int:
    return builder.StartVector(2, numElems, 2)

def StartPtRawVector(builder, numElems: int) -> int:
    return TelemetryStartPtRawVector(builder, numElems)

def TelemetryAddTc(builder: flatbuffers.Builder, tc: int):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(tc), 0)

def AddTc(builder: flatbuffers.Builder, tc: int):
    TelemetryAddTc(builder, tc)

def TelemetryStartTcVector(builder, numElems: int) -> int:
    return builder.StartVector(4, numElems, 4)

def StartTcVector(builder, numElems: int) -> int:
    return TelemetryStartTcVector(builder, numElems)

def TelemetryAddTcRaw(builder: flatbuffers.Builder, tcRaw: int):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(tcRaw), 0)

def AddTcRaw(builder: flatbuffers.Builder, tcRaw: int):
    TelemetryAddTcRaw(builder, tcRaw)

def TelemetryStartTcRawVector(builder, numElems: int) -> int:
    return builder.StartVector(2, numElems, 2)

def StartTcRawVector(builder, numElems: int) -> int:
    return TelemetryStartTcRawVector(builder, numElems)

def TelemetryAddConfig(builder: flatbuffers.Builder, config: int):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(config), 0)

def AddConfig(builder: flatbuffers.Builder, config: int):
    TelemetryAddConfig(builder, config)

def TelemetryEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return TelemetryEnd(builder)
