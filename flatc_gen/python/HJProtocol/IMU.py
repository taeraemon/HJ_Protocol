# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HJProtocol

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class IMU(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IMU()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIMU(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def IMUBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x4A\x54\x4D", size_prefixed=size_prefixed)

    # IMU
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IMU
    def Accx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # IMU
    def Accy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # IMU
    def Accz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # IMU
    def Gyrx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # IMU
    def Gyry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # IMU
    def Gyrz(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def IMUStart(builder: flatbuffers.Builder):
    builder.StartObject(6)

def Start(builder: flatbuffers.Builder):
    IMUStart(builder)

def IMUAddAccx(builder: flatbuffers.Builder, accx: float):
    builder.PrependFloat32Slot(0, accx, 0.0)

def AddAccx(builder: flatbuffers.Builder, accx: float):
    IMUAddAccx(builder, accx)

def IMUAddAccy(builder: flatbuffers.Builder, accy: float):
    builder.PrependFloat32Slot(1, accy, 0.0)

def AddAccy(builder: flatbuffers.Builder, accy: float):
    IMUAddAccy(builder, accy)

def IMUAddAccz(builder: flatbuffers.Builder, accz: float):
    builder.PrependFloat32Slot(2, accz, 0.0)

def AddAccz(builder: flatbuffers.Builder, accz: float):
    IMUAddAccz(builder, accz)

def IMUAddGyrx(builder: flatbuffers.Builder, gyrx: float):
    builder.PrependFloat32Slot(3, gyrx, 0.0)

def AddGyrx(builder: flatbuffers.Builder, gyrx: float):
    IMUAddGyrx(builder, gyrx)

def IMUAddGyry(builder: flatbuffers.Builder, gyry: float):
    builder.PrependFloat32Slot(4, gyry, 0.0)

def AddGyry(builder: flatbuffers.Builder, gyry: float):
    IMUAddGyry(builder, gyry)

def IMUAddGyrz(builder: flatbuffers.Builder, gyrz: float):
    builder.PrependFloat32Slot(5, gyrz, 0.0)

def AddGyrz(builder: flatbuffers.Builder, gyrz: float):
    IMUAddGyrz(builder, gyrz)

def IMUEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return IMUEnd(builder)
