# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HJProtocol

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class NAV(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NAV()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNAV(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def NAVBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x4A\x54\x4D", size_prefixed=size_prefixed)

    # NAV
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NAV
    def NavStatus(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # NAV
    def NavRoll(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # NAV
    def NavPitch(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # NAV
    def NavYaw(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # NAV
    def NavLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # NAV
    def NavLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # NAV
    def NavAlt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # NAV
    def NavQua0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # NAV
    def NavQua1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # NAV
    def NavQua2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # NAV
    def NavQua3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def NAVStart(builder: flatbuffers.Builder):
    builder.StartObject(11)

def Start(builder: flatbuffers.Builder):
    NAVStart(builder)

def NAVAddNavStatus(builder: flatbuffers.Builder, navStatus: int):
    builder.PrependInt8Slot(0, navStatus, 0)

def AddNavStatus(builder: flatbuffers.Builder, navStatus: int):
    NAVAddNavStatus(builder, navStatus)

def NAVAddNavRoll(builder: flatbuffers.Builder, navRoll: float):
    builder.PrependFloat32Slot(1, navRoll, 0.0)

def AddNavRoll(builder: flatbuffers.Builder, navRoll: float):
    NAVAddNavRoll(builder, navRoll)

def NAVAddNavPitch(builder: flatbuffers.Builder, navPitch: float):
    builder.PrependFloat32Slot(2, navPitch, 0.0)

def AddNavPitch(builder: flatbuffers.Builder, navPitch: float):
    NAVAddNavPitch(builder, navPitch)

def NAVAddNavYaw(builder: flatbuffers.Builder, navYaw: float):
    builder.PrependFloat32Slot(3, navYaw, 0.0)

def AddNavYaw(builder: flatbuffers.Builder, navYaw: float):
    NAVAddNavYaw(builder, navYaw)

def NAVAddNavLat(builder: flatbuffers.Builder, navLat: float):
    builder.PrependFloat64Slot(4, navLat, 0.0)

def AddNavLat(builder: flatbuffers.Builder, navLat: float):
    NAVAddNavLat(builder, navLat)

def NAVAddNavLon(builder: flatbuffers.Builder, navLon: float):
    builder.PrependFloat64Slot(5, navLon, 0.0)

def AddNavLon(builder: flatbuffers.Builder, navLon: float):
    NAVAddNavLon(builder, navLon)

def NAVAddNavAlt(builder: flatbuffers.Builder, navAlt: float):
    builder.PrependFloat32Slot(6, navAlt, 0.0)

def AddNavAlt(builder: flatbuffers.Builder, navAlt: float):
    NAVAddNavAlt(builder, navAlt)

def NAVAddNavQua0(builder: flatbuffers.Builder, navQua0: float):
    builder.PrependFloat32Slot(7, navQua0, 0.0)

def AddNavQua0(builder: flatbuffers.Builder, navQua0: float):
    NAVAddNavQua0(builder, navQua0)

def NAVAddNavQua1(builder: flatbuffers.Builder, navQua1: float):
    builder.PrependFloat32Slot(8, navQua1, 0.0)

def AddNavQua1(builder: flatbuffers.Builder, navQua1: float):
    NAVAddNavQua1(builder, navQua1)

def NAVAddNavQua2(builder: flatbuffers.Builder, navQua2: float):
    builder.PrependFloat32Slot(9, navQua2, 0.0)

def AddNavQua2(builder: flatbuffers.Builder, navQua2: float):
    NAVAddNavQua2(builder, navQua2)

def NAVAddNavQua3(builder: flatbuffers.Builder, navQua3: float):
    builder.PrependFloat32Slot(10, navQua3, 0.0)

def AddNavQua3(builder: flatbuffers.Builder, navQua3: float):
    NAVAddNavQua3(builder, navQua3)

def NAVEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return NAVEnd(builder)
