from __future__ import annotations

import flatbuffers
import numpy as np

import flatbuffers
import typing
from HJProtocol.GPS import GPS
from HJProtocol.IMU import IMU
from HJProtocol.NAV import NAV
from HJProtocol.State import State

uoffset: typing.TypeAlias = flatbuffers.number_types.UOffsetTFlags.py_type

class Telemetry(object):
  @classmethod
  def GetRootAs(cls, buf: bytes, offset: int) -> Telemetry: ...
  @classmethod
  def GetRootAsTelemetry(cls, buf: bytes, offset: int) -> Telemetry: ...
  @classmethod
  def TelemetryBufferHasIdentifier(cls, buf: bytes, offset: int, size_prefixed: bool) -> bool: ...
  def Init(self, buf: bytes, pos: int) -> None: ...
  def State(self) -> State | None: ...
  def Nav(self) -> NAV | None: ...
  def Imu(self) -> IMU | None: ...
  def Gps(self) -> GPS | None: ...
  def Sv(self, i: int) -> typing.List[int]: ...
  def SvAsNumpy(self) -> np.ndarray: ...
  def SvLength(self) -> int: ...
  def SvIsNone(self) -> bool: ...
  def Pt(self, i: int) -> typing.List[float]: ...
  def PtAsNumpy(self) -> np.ndarray: ...
  def PtLength(self) -> int: ...
  def PtIsNone(self) -> bool: ...
  def PtRaw(self, i: int) -> typing.List[int]: ...
  def PtRawAsNumpy(self) -> np.ndarray: ...
  def PtRawLength(self) -> int: ...
  def PtRawIsNone(self) -> bool: ...
  def Tc(self, i: int) -> typing.List[float]: ...
  def TcAsNumpy(self) -> np.ndarray: ...
  def TcLength(self) -> int: ...
  def TcIsNone(self) -> bool: ...
  def TcRaw(self, i: int) -> typing.List[int]: ...
  def TcRawAsNumpy(self) -> np.ndarray: ...
  def TcRawLength(self) -> int: ...
  def TcRawIsNone(self) -> bool: ...
  def Config(self) -> str | None: ...
def TelemetryStart(builder: flatbuffers.Builder) -> None: ...
def Start(builder: flatbuffers.Builder) -> None: ...
def TelemetryAddState(builder: flatbuffers.Builder, state: uoffset) -> None: ...
def TelemetryAddNav(builder: flatbuffers.Builder, nav: uoffset) -> None: ...
def TelemetryAddImu(builder: flatbuffers.Builder, imu: uoffset) -> None: ...
def TelemetryAddGps(builder: flatbuffers.Builder, gps: uoffset) -> None: ...
def TelemetryAddSv(builder: flatbuffers.Builder, sv: uoffset) -> None: ...
def TelemetryStartSvVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartSvVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TelemetryAddPt(builder: flatbuffers.Builder, pt: uoffset) -> None: ...
def TelemetryStartPtVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartPtVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TelemetryAddPtRaw(builder: flatbuffers.Builder, ptRaw: uoffset) -> None: ...
def TelemetryStartPtRawVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartPtRawVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TelemetryAddTc(builder: flatbuffers.Builder, tc: uoffset) -> None: ...
def TelemetryStartTcVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartTcVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TelemetryAddTcRaw(builder: flatbuffers.Builder, tcRaw: uoffset) -> None: ...
def TelemetryStartTcRawVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def StartTcRawVector(builder: flatbuffers.Builder, num_elems: int) -> uoffset: ...
def TelemetryAddConfig(builder: flatbuffers.Builder, config: uoffset) -> None: ...
def TelemetryEnd(builder: flatbuffers.Builder) -> uoffset: ...
def End(builder: flatbuffers.Builder) -> uoffset: ...

