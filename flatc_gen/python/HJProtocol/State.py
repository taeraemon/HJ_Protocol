# automatically generated by the FlatBuffers compiler, do not modify

# namespace: HJProtocol

import flatbuffers
from flatbuffers.compat import import_numpy
from typing import Any
np = import_numpy()

class State(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = State()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StateBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x48\x4A\x54\x4D", size_prefixed=size_prefixed)

    # State
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # State
    def BootTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # State
    def ModeTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # State
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # State
    def Countdown(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # State
    def WarnCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # State
    def ErrorCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # State
    def Voltage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # State
    def Current(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def StateStart(builder: flatbuffers.Builder):
    builder.StartObject(8)

def Start(builder: flatbuffers.Builder):
    StateStart(builder)

def StateAddBootTime(builder: flatbuffers.Builder, bootTime: int):
    builder.PrependUint64Slot(0, bootTime, 0)

def AddBootTime(builder: flatbuffers.Builder, bootTime: int):
    StateAddBootTime(builder, bootTime)

def StateAddModeTime(builder: flatbuffers.Builder, modeTime: int):
    builder.PrependUint64Slot(1, modeTime, 0)

def AddModeTime(builder: flatbuffers.Builder, modeTime: int):
    StateAddModeTime(builder, modeTime)

def StateAddMode(builder: flatbuffers.Builder, mode: int):
    builder.PrependInt8Slot(2, mode, 0)

def AddMode(builder: flatbuffers.Builder, mode: int):
    StateAddMode(builder, mode)

def StateAddCountdown(builder: flatbuffers.Builder, countdown: int):
    builder.PrependInt32Slot(3, countdown, 0)

def AddCountdown(builder: flatbuffers.Builder, countdown: int):
    StateAddCountdown(builder, countdown)

def StateAddWarnCode(builder: flatbuffers.Builder, warnCode: int):
    builder.PrependUint32Slot(4, warnCode, 0)

def AddWarnCode(builder: flatbuffers.Builder, warnCode: int):
    StateAddWarnCode(builder, warnCode)

def StateAddErrorCode(builder: flatbuffers.Builder, errorCode: int):
    builder.PrependUint32Slot(5, errorCode, 0)

def AddErrorCode(builder: flatbuffers.Builder, errorCode: int):
    StateAddErrorCode(builder, errorCode)

def StateAddVoltage(builder: flatbuffers.Builder, voltage: float):
    builder.PrependFloat32Slot(6, voltage, 0.0)

def AddVoltage(builder: flatbuffers.Builder, voltage: float):
    StateAddVoltage(builder, voltage)

def StateAddCurrent(builder: flatbuffers.Builder, current: float):
    builder.PrependFloat32Slot(7, current, 0.0)

def AddCurrent(builder: flatbuffers.Builder, current: float):
    StateAddCurrent(builder, current)

def StateEnd(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()

def End(builder: flatbuffers.Builder) -> int:
    return StateEnd(builder)
