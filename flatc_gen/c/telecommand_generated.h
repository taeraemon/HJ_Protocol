// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TELECOMMAND_HJPROTOCOL_H_
#define FLATBUFFERS_GENERATED_TELECOMMAND_HJPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "common_generated.h"

namespace HJProtocol {

struct Telecommand;
struct TelecommandBuilder;
struct TelecommandT;

struct TelecommandT : public ::flatbuffers::NativeTable {
  typedef Telecommand TableType;
  HJProtocol::OperationMode cmd_mode = HJProtocol::OperationMode::UNKNOWN;
  std::string cmd_config{};
  bool cmd_nav = false;
};

struct Telecommand FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TelecommandT NativeTableType;
  typedef TelecommandBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CMD_MODE = 4,
    VT_CMD_CONFIG = 6,
    VT_CMD_NAV = 8
  };
  HJProtocol::OperationMode cmd_mode() const {
    return static_cast<HJProtocol::OperationMode>(GetField<int8_t>(VT_CMD_MODE, 0));
  }
  const ::flatbuffers::String *cmd_config() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CMD_CONFIG);
  }
  bool cmd_nav() const {
    return GetField<uint8_t>(VT_CMD_NAV, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_CMD_MODE, 1) &&
           VerifyOffset(verifier, VT_CMD_CONFIG) &&
           verifier.VerifyString(cmd_config()) &&
           VerifyField<uint8_t>(verifier, VT_CMD_NAV, 1) &&
           verifier.EndTable();
  }
  TelecommandT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TelecommandT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Telecommand> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TelecommandT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TelecommandBuilder {
  typedef Telecommand Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_cmd_mode(HJProtocol::OperationMode cmd_mode) {
    fbb_.AddElement<int8_t>(Telecommand::VT_CMD_MODE, static_cast<int8_t>(cmd_mode), 0);
  }
  void add_cmd_config(::flatbuffers::Offset<::flatbuffers::String> cmd_config) {
    fbb_.AddOffset(Telecommand::VT_CMD_CONFIG, cmd_config);
  }
  void add_cmd_nav(bool cmd_nav) {
    fbb_.AddElement<uint8_t>(Telecommand::VT_CMD_NAV, static_cast<uint8_t>(cmd_nav), 0);
  }
  explicit TelecommandBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Telecommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Telecommand>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Telecommand> CreateTelecommand(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    HJProtocol::OperationMode cmd_mode = HJProtocol::OperationMode::UNKNOWN,
    ::flatbuffers::Offset<::flatbuffers::String> cmd_config = 0,
    bool cmd_nav = false) {
  TelecommandBuilder builder_(_fbb);
  builder_.add_cmd_config(cmd_config);
  builder_.add_cmd_nav(cmd_nav);
  builder_.add_cmd_mode(cmd_mode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Telecommand> CreateTelecommandDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    HJProtocol::OperationMode cmd_mode = HJProtocol::OperationMode::UNKNOWN,
    const char *cmd_config = nullptr,
    bool cmd_nav = false) {
  auto cmd_config__ = cmd_config ? _fbb.CreateString(cmd_config) : 0;
  return HJProtocol::CreateTelecommand(
      _fbb,
      cmd_mode,
      cmd_config__,
      cmd_nav);
}

::flatbuffers::Offset<Telecommand> CreateTelecommand(::flatbuffers::FlatBufferBuilder &_fbb, const TelecommandT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TelecommandT *Telecommand::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TelecommandT>(new TelecommandT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Telecommand::UnPackTo(TelecommandT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = cmd_mode(); _o->cmd_mode = _e; }
  { auto _e = cmd_config(); if (_e) _o->cmd_config = _e->str(); }
  { auto _e = cmd_nav(); _o->cmd_nav = _e; }
}

inline ::flatbuffers::Offset<Telecommand> Telecommand::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const TelecommandT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTelecommand(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Telecommand> CreateTelecommand(::flatbuffers::FlatBufferBuilder &_fbb, const TelecommandT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const TelecommandT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _cmd_mode = _o->cmd_mode;
  auto _cmd_config = _o->cmd_config.empty() ? 0 : _fbb.CreateString(_o->cmd_config);
  auto _cmd_nav = _o->cmd_nav;
  return HJProtocol::CreateTelecommand(
      _fbb,
      _cmd_mode,
      _cmd_config,
      _cmd_nav);
}

inline const HJProtocol::Telecommand *GetTelecommand(const void *buf) {
  return ::flatbuffers::GetRoot<HJProtocol::Telecommand>(buf);
}

inline const HJProtocol::Telecommand *GetSizePrefixedTelecommand(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<HJProtocol::Telecommand>(buf);
}

inline const char *TelecommandIdentifier() {
  return "HJTC";
}

inline bool TelecommandBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TelecommandIdentifier());
}

inline bool SizePrefixedTelecommandBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, TelecommandIdentifier(), true);
}

inline bool VerifyTelecommandBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<HJProtocol::Telecommand>(TelecommandIdentifier());
}

inline bool VerifySizePrefixedTelecommandBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<HJProtocol::Telecommand>(TelecommandIdentifier());
}

inline void FinishTelecommandBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<HJProtocol::Telecommand> root) {
  fbb.Finish(root, TelecommandIdentifier());
}

inline void FinishSizePrefixedTelecommandBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<HJProtocol::Telecommand> root) {
  fbb.FinishSizePrefixed(root, TelecommandIdentifier());
}

inline std::unique_ptr<HJProtocol::TelecommandT> UnPackTelecommand(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<HJProtocol::TelecommandT>(GetTelecommand(buf)->UnPack(res));
}

inline std::unique_ptr<HJProtocol::TelecommandT> UnPackSizePrefixedTelecommand(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<HJProtocol::TelecommandT>(GetSizePrefixedTelecommand(buf)->UnPack(res));
}

}  // namespace HJProtocol

#endif  // FLATBUFFERS_GENERATED_TELECOMMAND_HJPROTOCOL_H_
